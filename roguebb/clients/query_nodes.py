#!/usr/bin/env python3
"""
Script pour interroger les n≈ìuds phpBB connect√©s.

Usage:
    python3 query_nodes.py status
    python3 query_nodes.py stats
    python3 query_nodes.py sync_now
    python3 query_nodes.py local_ips
    python3 query_nodes.py reported_ips
    python3 query_nodes.py <query_type> --node <url>

Exemples:
    python3 query_nodes.py status
    python3 query_nodes.py stats
    python3 query_nodes.py sync_now --node http://forum1.com/app.php/activitycontrol/api/query
    python3 query_nodes.py reported_ips
"""

import sys
import json
import requests
from datetime import datetime

# Configuration
SERVER_URL = "http://localhost:5000"


def get_registered_nodes():
    """R√©cup√®re la liste des n≈ìuds enregistr√©s depuis le serveur."""
    try:
        response = requests.get(f"{SERVER_URL}/api/webhooks", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            webhooks = data.get('webhooks', [])
            
            # Convertir les URLs webhook en URLs de requ√™te
            nodes = []
            for webhook_url in webhooks:
                # Remplacer /webhook/notify par /api/query
                node_url = webhook_url.replace('/webhook/notify', '/api/query')
                nodes.append(node_url)
            
            return nodes
        else:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des n≈ìuds: HTTP {response.status_code}")
            return []
            
    except requests.RequestException as e:
        print(f"‚ùå Erreur de connexion au serveur RogueBB: {e}")
        return []


def query_node(node_url, query_type):
    """Envoie une requ√™te √† un n≈ìud phpBB."""
    payload = {'query': query_type}
    
    try:
        response = requests.post(
            node_url,
            json=payload,
            timeout=10,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return {
                'success': True,
                'data': response.json(),
                'node_url': node_url
            }
        else:
            return {
                'success': False,
                'error': f"HTTP {response.status_code}",
                'message': response.text[:200],
                'node_url': node_url
            }
            
    except requests.RequestException as e:
        return {
            'success': False,
            'error': 'Connection error',
            'message': str(e),
            'node_url': node_url
        }


def format_timestamp(timestamp):
    """Formate un timestamp Unix en date lisible."""
    try:
        return datetime.fromtimestamp(int(timestamp)).strftime('%Y-%m-%d %H:%M:%S')
    except:
        return 'N/A'


def display_status_results(results):
    """Affiche les r√©sultats de la requ√™te status."""
    print("=" * 80)
    print("üìä STATUT DES N≈íUDS")
    print("=" * 80)
    
    for i, result in enumerate(results, 1):
        print(f"\nüî∏ N≈ìud {i}: {result['node_url']}")
        print("-" * 80)
        
        if result['success']:
            data = result['data']
            print(f"  ‚úÖ Statut          : {data.get('status', 'unknown')}")
            print(f"  üì± Type            : {data.get('node_type', 'unknown')}")
            print(f"  üè∑Ô∏è  Nom du forum    : {data.get('forum_name', 'N/A')}")
            print(f"  üì¶ Version phpBB   : {data.get('phpbb_version', 'N/A')}")
            print(f"  üîß Version ext.    : {data.get('extension_version', 'N/A')}")
            print(f"  üîÑ Sync activ√©e    : {'‚úÖ Oui' if data.get('sync_enabled') else '‚ùå Non'}")
            print(f"  üì° Report activ√©   : {'‚úÖ Oui' if data.get('reporting_enabled') else '‚ùå Non'}")
            print(f"  üïí Derni√®re sync   : {format_timestamp(data.get('last_sync', 0))}")
            print(f"  üìã Version liste   : {data.get('ip_list_version', 0)}")
            print(f"  ‚è∞ Timestamp       : {format_timestamp(data.get('timestamp', 0))}")
        else:
            print(f"  ‚ùå Erreur          : {result['error']}")
            print(f"  üí¨ Message         : {result['message']}")
    
    print("\n" + "=" * 80)


def display_stats_results(results):
    """Affiche les r√©sultats de la requ√™te stats."""
    print("=" * 80)
    print("üìà STATISTIQUES DES N≈íUDS")
    print("=" * 80)
    
    for i, result in enumerate(results, 1):
        print(f"\nüî∏ N≈ìud {i}: {result['node_url']}")
        print("-" * 80)
        
        if result['success']:
            data = result['data']
            stats = data.get('stats', {})
            
            print(f"  üõ°Ô∏è  IPs bannies     : {stats.get('banned_ips', 0):,}")
            print(f"  üë• Utilisateurs    : {stats.get('total_users', 0):,}")
            print(f"  üìù Messages        : {stats.get('total_posts', 0):,}")
            print(f"  üí¨ Sujets          : {stats.get('total_topics', 0):,}")
            print(f"  üïí Derni√®re sync   : {format_timestamp(stats.get('last_sync', 0))}")
            print(f"  üìã Version liste   : {stats.get('ip_list_version', 0)}")
            print(f"  ‚è∞ Timestamp       : {format_timestamp(data.get('timestamp', 0))}")
        else:
            print(f"  ‚ùå Erreur          : {result['error']}")
            print(f"  üí¨ Message         : {result['message']}")
    
    print("\n" + "=" * 80)


def display_sync_results(results):
    """Affiche les r√©sultats de la requ√™te sync_now."""
    print("=" * 80)
    print("üîÑ SYNCHRONISATION DES N≈íUDS")
    print("=" * 80)
    
    for i, result in enumerate(results, 1):
        print(f"\nüî∏ N≈ìud {i}: {result['node_url']}")
        print("-" * 80)
        
        if result['success']:
            data = result['data']
            stats = data.get('stats', {})
            
            print(f"  ‚úÖ Statut          : {data.get('status', 'unknown')}")
            print(f"  üí¨ Message         : {data.get('message', 'N/A')}")
            print(f"  ‚ûï IPs ajout√©es    : {stats.get('added', 0)}")
            print(f"  ‚ûñ IPs retir√©es    : {stats.get('removed', 0)}")
            print(f"  üìä Total IPs       : {stats.get('total', 0):,}")
            print(f"  ‚è∞ Timestamp       : {format_timestamp(data.get('timestamp', 0))}")
        else:
            print(f"  ‚ùå Erreur          : {result['error']}")
            print(f"  üí¨ Message         : {result['message']}")
    
    print("\n" + "=" * 80)


def display_ips_results(results, title="IPs"):
    """Affiche les r√©sultats des requ√™tes d'IPs."""
    print("=" * 80)
    print(f"üåê {title}")
    print("=" * 80)
    
    for i, result in enumerate(results, 1):
        print(f"\nüî∏ N≈ìud {i}: {result['node_url']}")
        print("-" * 80)
        
        if result['success']:
            data = result['data']
            ips = data.get('ips', [])
            
            print(f"  üìä Nombre d'IPs    : {data.get('count', 0)}")
            
            if 'note' in data:
                print(f"  ‚ÑπÔ∏è  Note           : {data['note']}")
            
            if ips:
                print(f"\n  üìã Liste des IPs:")
                for j, ip_data in enumerate(ips[:20], 1):  # Limiter √† 20 pour l'affichage
                    if isinstance(ip_data, dict):
                        # Pour reported_ips
                        ip = ip_data.get('ip', 'N/A')
                        reason = ip_data.get('reason', 'N/A')
                        count = ip_data.get('count', 0)
                        submitted = '‚úÖ' if ip_data.get('submitted') else '‚ùå'
                        print(f"    {j:3d}. {ip:20s} - {reason[:30]:30s} (x{count}) [{submitted}]")
                    else:
                        # Pour local_ips
                        print(f"    {j:3d}. {ip_data}")
                
                if len(ips) > 20:
                    print(f"    ... et {len(ips) - 20} de plus")
            else:
                print(f"  ‚ÑπÔ∏è  Aucune IP trouv√©e")
            
            print(f"  ‚è∞ Timestamp       : {format_timestamp(data.get('timestamp', 0))}")
        else:
            print(f"  ‚ùå Erreur          : {result['error']}")
            print(f"  üí¨ Message         : {result['message']}")
    
    print("\n" + "=" * 80)


def main():
    if len(sys.argv) < 2:
        print("=" * 80)
        print("üîç Interrogation des N≈ìuds phpBB")
        print("=" * 80)
        print()
        print("Usage: python3 query_nodes.py <query_type> [options]")
        print()
        print("Types de requ√™tes:")
        print("  status        Statut et configuration du n≈ìud")
        print("  stats         Statistiques du forum")
        print("  sync_now      D√©clencher une synchronisation imm√©diate")
        print("  local_ips     IPs bannies localement sur le forum")
        print("  reported_ips  IPs signal√©es par ce n≈ìud √† RogueBB")
        print()
        print("Options:")
        print("  --node <url>  Interroger un n≈ìud sp√©cifique uniquement")
        print()
        print("Exemples:")
        print("  python3 query_nodes.py status")
        print("  python3 query_nodes.py stats")
        print("  python3 query_nodes.py sync_now")
        print("  python3 query_nodes.py local_ips --node http://forum.com/app.php/activitycontrol/api/query")
        print("=" * 80)
        sys.exit(1)
    
    query_type = sys.argv[1]
    
    # V√©rifier si une URL sp√©cifique est fournie
    specific_node = None
    if '--node' in sys.argv:
        try:
            node_index = sys.argv.index('--node')
            specific_node = sys.argv[node_index + 1]
        except (IndexError, ValueError):
            print("‚ùå Erreur: URL manquante apr√®s --node")
            sys.exit(1)
    
    # D√©terminer les n≈ìuds √† interroger
    if specific_node:
        nodes = [specific_node]
        print(f"üîç Interrogation d'un n≈ìud sp√©cifique: {specific_node}")
    else:
        print("üîç R√©cup√©ration de la liste des n≈ìuds...")
        nodes = get_registered_nodes()
        
        if not nodes:
            print("‚ö†Ô∏è  Aucun n≈ìud enregistr√© trouv√©")
            print("üí° Ajoutez des webhooks avec: python3 manage_webhooks.py add <url>")
            sys.exit(1)
        
        print(f"‚úÖ {len(nodes)} n≈ìud(s) trouv√©(s)")
    
    print()
    
    # Interroger tous les n≈ìuds
    results = []
    for node_url in nodes:
        print(f"üì° Interrogation de: {node_url}...")
        result = query_node(node_url, query_type)
        results.append(result)
    
    print()
    
    # Afficher les r√©sultats selon le type de requ√™te
    if query_type == 'status':
        display_status_results(results)
    elif query_type == 'stats':
        display_stats_results(results)
    elif query_type == 'sync_now':
        display_sync_results(results)
    elif query_type == 'local_ips':
        display_ips_results(results, "IPs BANNIES LOCALEMENT")
    elif query_type == 'reported_ips':
        display_ips_results(results, "IPs SIGNAL√âES PAR LES N≈íUDS")
    else:
        print(f"‚ùå Type de requ√™te inconnu: {query_type}")
        sys.exit(1)
    
    # Compter les succ√®s et √©checs
    success_count = sum(1 for r in results if r['success'])
    failure_count = len(results) - success_count
    
    print(f"‚úÖ Succ√®s: {success_count} | ‚ùå √âchecs: {failure_count}")
    
    sys.exit(0 if failure_count == 0 else 1)


if __name__ == '__main__':
    main()
